

#
# Запуск сайта
#                 >>> http://127.0.0.1:5000/          Запуск с ПК               при запуске с компа через сеть wifi
#                 >>> http:// 192.168.0.108:5000      Запуск с телефона         при запуске с компа через сеть wifi
#                 >>> http://31.130.150.56:5000                                 при запуске с хостинга
#
#                 >>> http://127.0.0.1:443                                      изменен порт - ???
#                 >>> http://31.130.150.56:443                                  изменен порт    при запуске с хостинга
#
# Доступ к swagger
#                 >>> http://localhost:5000/apidocs/                            при запуске с компа через сеть wifi
#                 >>> http://31.130.150.56:5000/apidocs/                        при запуске с хостинга

# Сессия =  218304.session_TW_Mult_Novochek ### (02/15/2025 11:29:55 AM)        (Detached)

# Домен time web spetstehnika-mini-novocherkassk.ru              (15.02.25)
# Домен time web спецтехника-мини-новочеркасск.рф                (15.02.25)


#____________________________________________________________________________________________________________________

# Установка Flask
#                 >>> pip install Flask
# Установка библиотек
#                 >>> pip install flasgger

#_____________________________________________________________________________________________________________________
# подключение к хостингу timeweb и работа через терминал

#     (.venv) D:\Rabota_2025\Mult_Novochek_02_25 git:[main]
# >>> ssh root@31.130.150.56
#     root@31.130.150.56's password: (пароль берем на хостинге для root и вводим по одной цифре)

# Перейти в корневую папку  bot_Ava которая создана и оплачена на хостинге
#             >>> cd bot_Ava

# Создайте директорию внутри папки bot_Ava для нового сайта Mult_Novochek_02_25:
#             >>>  mkdir TW_Mult_Novochek_02_25                             ### - Создание директории - ЭТА КОМАНДА +
#             >>>  cd TW_Mult_Novochek_02_25                                ### - Переход в директорию - ЭТА КОМАНДА +

# Подключение к хостингу и клонирование чатбота в него из папки на компе
#             >>> git clone остальное в черновике проекта ### - ЭТА КОМАНДА 21 +

# Убедитесь, что у Вас установлен Python и pip на сервере. Если pip не установлен, возможно,
# Вам нужно будет установить его с помощью команды:
#             >>> sudo apt-get install python3-pip

# Установите необходимые библиотеки:
# Если у Вас есть файл requirements.txt в папке Вашего бота, выполните команду:

#           >>> pip install -r requirements.txt

# УПУЩЕНО
#       установка >>> swagger
#       установка >>> еще какой-то библиотеки




            ###   ВАЖНО   ###
# Создание сессии должно происходить в папке проекта
# root@4171473-in62550:~/bot_Ava/TW_Mult_Novochek_02_25/Mult_Novochek_02_25#
#           >>> screen -S session_TW_Mult_Novochek

# Запуск приложения внутри сессии:
# После запуска сессии Вы можете запустить Ваше приложение, например:

#           >>> python main.py

# Выход из сессии, не отключая её:
# Чтобы выйти из сессии screen, не завершив её, нажмите комбинацию клавиш:
#
#           нажатие клавиш = Ctrl + A, затем D

# Проверка сессий в screen
# Если Вы использовали screen, выполните следующую команду:

#           >>> screen -ls

# Установка SQLAlchemy для работы в базе данных
#           >>> pip install Flask SQLAlchemy

# Обновите код: Выполните команды для обновления Вашего репозитория:
#           >>> git fetch origin
#           >>> git pull origin main

# Подключение к сессии
#           >>> screen -r 218304

# Отключение или остановка приложения в сессии
#           нажать Ctrl + C

# Запуск приложения внутри сессии:
# После запуска сессии Вы можете запустить Ваше приложение, например:
#           >>> python main.py

# Отсоединение от сессии:
# Нажмите Ctrl + A, затем D. Это сочетание клавиш позволяет отсоединиться от текущей сессии screen,
# не останавливая выполнение программы.

# Шаги по настройке Nginx для Ваших доменов
# Создайте конфигурационный файл для Вашего домена
# Создайте новый файл конфигурации для каждого из Ваших доменов. Например, создадим файл для spetstehnika-mini-novocherkassk.ru:

#             >>> sudo nano /etc/nginx/sites-available/spetstehnika-mini-novocherkassk.ru
#             >>> sudo nano /etc/nginx/sites-available/спецтехника-мини-новочеркасск.рф

### вставляем этот код:
# server {
#     listen 80;
#     server_name спецтехника-мини-новочеркасск.рф;
#
#     location / {
#         proxy_pass http://31.130.150.56:443;  # Укажите порт Вашего приложения
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }

# Если Вы закончили редактирование конфигурации, сохраните файл и выйдите из редактора. Для этого:
#
#             >>> Нажмите Ctrl + O (Write Out) для сохранения.
#             >>> Нажмите Enter, чтобы подтвердить имя файла.
#             >>> Нажмите Ctrl + X (Exit) для выхода из редактора.

# Проверьте конфигурацию снова:
# После внесения изменений снова проверьте конфигурацию:

#             >>> sudo nginx -t

# Перезапустите Nginx:
# Если тест прошел успешно, перезапустите Nginx:
#             >>> sudo systemctl restart nginx

# Шаги для настройки HTTPS (SSL)
# Получение SSL-сертификата:
# Вы можете использовать Let's Encrypt для получения бесплатного SSL-сертификата. Убедитесь, что у Вас установлен certbot:

#           >>> sudo apt update
#           >>> sudo apt install certbot python3-certbot-nginx
# Получение сертификата:
# Запустите следующую команду для автоматического получения и установки сертификата:

#           >>> sudo certbot --nginx -d spetstehnika-mini-novocherkassk.ru -d спецтехника-мини-новочеркасск.рф
# Certbot автоматически изменит Ваши конфигурационные файлы Nginx и добавит необходимые строки для SSL.

# Чтобы преобразовать Ваш домен в Punycode, Вы можете использовать онлайн-конвертер или воспользоваться командой в
# терминале, если у Вас установлен пакет idn2. Вот как это сделать:
# Установите idn2, если он еще не установлен:
#          >>> sudo apt install idn2

# Преобразуйте Ваш домен в Punycode:
#          >>> idn2 спецтехника-мини-новочеркасск.рф ### выдало
# Установите SSL-сертификаты с помощью Certbot:
#          >>> sudo certbot --nginx -d spetstehnika-mini-novocherkassk.ru -d xn-----6kccjoaewcauhbwlgctbf3bevaf6fza0c.xn--p1ai

# (Y)es/(N)o: n
# Account registered.
# Requesting a certificate for spetstehnika-mini-novocherkassk.ru and xn-----6kccjoaewcauhbwlgctbf3bevaf6fza0c.xn--p1ai
#
# Successfully received certificate.
# Certificate is saved at: /etc/letsencrypt/live/spetstehnika-mini-novocherkassk.ru/fullchain.pem
# Key is saved at:         /etc/letsencrypt/live/spetstehnika-mini-novocherkassk.ru/privkey.pem
# This certificate expires on 2025-05-17.
# These files will be updated when the certificate renews.
# Certbot has set up a scheduled task to automatically renew this certificate in the background.
#
# Deploying certificate
# Successfully deployed certificate for spetstehnika-mini-novocherkassk.ru to /etc/nginx/sites-enabled/spetstehnika-mini-novocherkassk.ru
# Successfully deployed certificate for xn-----6kccjoaewcauhbwlgctbf3bevaf6fza0c.xn--p1ai to /etc/nginx/sites-enabled/default
# Congratulations! You have successfully enabled HTTPS on https://spetstehnika-mini-novocherkassk.ru and https://xn-----6kccjoaewcauhbwlgctbf3bevaf6fza0c.xn--p1ai
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# If you like Certbot, please consider supporting our work by:
#  * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
#  * Donating to EFF:                    https://eff.org/donate-le
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# root@4171473-in62550:~/bot_Ava/TW_Mult_Novochek_02_25/Mult_Novochek_02_25#
'''
Эта информация является результатом успешного выполнения команды Certbot для получения и установки SSL-сертификатов для Ваших доменов. Давайте разберем ключевые моменты:

Регистрация аккаунта:

Certbot подтвердил, что Ваш аккаунт зарегистрирован. Это необходимо для получения сертификатов и получения уведомлений о их истечении.
Запрос сертификата:

Certbot запросил сертификаты для двух доменов: spetstehnika-mini-novocherkassk.ru и xn-----6kccjoaewcauhbwlgctbf3bevaf6fza0c.xn--p1ai.
Успешное получение сертификата:

Сертификат был успешно получен и сохранен по следующим путям:
Полная цепочка сертификатов: /etc/letsencrypt/live/spetstehnika-mini-novocherkassk.ru/fullchain.pem
Закрытый ключ: /etc/letsencrypt/live/spetstehnika-mini-novocherkassk.ru/privkey.pem
Также указано, что сертификат истекает 17 мая 2025 года.
Автоматическое обновление:

Certbot настроил задачу для автоматического обновления сертификатов в фоновом режиме, что означает, что Вам не нужно будет вручную обновлять сертификаты, когда они истекут.
Развертывание сертификата:

Сертификат был успешно развернут для spetstehnika-mini-novocherkassk.ru и для второго домена. Это означает, что Nginx теперь будет использовать эти сертификаты для обеспечения HTTPS-соединений.
Поздравление:

Certbot поздравляет Вас с успешным включением HTTPS для указанных доменов. Это означает, что Ваши сайты теперь защищены и могут использовать безопасные соединения.
Если у Вас есть дополнительные вопросы или Вам нужна помощь с конфигурацией, не стесняйтесь спрашивать!'''










# Комбинация клавиш Ctrl + D:
# Нажмите Ctrl и D одновременно. Это также завершит сессию и выйдет из SSH.

# Подключение к хостингу и клонирование чатбота в него из папки на компе

#            >>> git clone остальное в черновике                     ### - ИМЕННО ЭТА КОМАНДА СРАБОТАЛА


# Перейдите в директорию с вашим проектом:
# После подключения выполните:

#            >>> cd deadlinetaskbot_02_25

# Убедитесь, что у Вас установлен Python и pip на сервере. Если pip не установлен, возможно,
# Вам нужно будет установить его с помощью команды:

#            >>> sudo apt-get install python3-pip

# Проверка содержимого папки через командную строку
# После того как Вы выполните команду:

#            >>> ls ~/deadlinetask_02_25
# Вы увидите список файлов и папок, находящихся в директории deadlinetask_02_25.
# Чтобы получить более подробную информацию, например, размер файлов и даты их изменения, Вы можете использовать команду:

#            >>> ls -la ~/deadlinetask_02_25
# 2. Проверка содержимого файлов
# Если Вы хотите просмотреть содержимое конкретного файла, Вы можете использовать команду cat:
#

#            >>> cat ~/deadlinetask_02_25/имя_файла

# Для текстовых файлов это покажет их содержимое в терминале. Если файл большой, лучше использовать less или more:
#            >>> less ~/deadlinetask_02_25/имя_файла

# для просмотра содержимого папки:
#
#            >>> ls



### - Дополнительные команды #####################################################################################

# Удалить существующую директорию:
# Если Вы уверены, что данные в этой директории Вам не нужны, Вы можете удалить её:
#
#            >>> rm -rf deadlinetaskbot_02_25

# Перейти в существующую директорию:
# Если Вы хотите работать с уже существующим репозиторием, Вы можете перейти в эту директорию:
#
#            >>> cd deadlinetaskbot_02_25

# Перейдите на уровень выше:
# Вам нужно выйти из директории deadlinetaskbot_02_25. Для этого выполните:
#
#            >>> cd ..

# Теперь удалите директорию:
# После того как Вы вышли из директории, выполните команду:
#
#            >>> rm -rf deadlinetaskbot_02_25

# Проверьте, что директория удалена:
# Вы можете проверить, что директория была удалена, выполнив:
#
#            >>> ls

# Проверьте, где Вы находитесь:
# Вы можете использовать команду pwd (print working directory), чтобы узнать, в каком каталоге Вы находитесь в данный момент:
#
#            >>> pwd

# больше информации о файлах, таких как права доступа, размер и дата изменения,
# Вы можете использовать команду с ключом -l (длинный формат):
#
#            >>> ls -l
# Если Вы хотите увидеть содержимое папки в более удобном для восприятия виде,
# включая скрытые файлы (файлы, начинающиеся с точки), используйте:
#
#           >>> ls -la

##################################################################################################################

# Подключение к хостингу:
#
# Войдите в панель управления Вашего аккаунта на Timeweb.
# Найдите раздел, посвященный управлению файлами или SSH-доступу.
# Если у Вас есть SSH-доступ, используйте его для подключения к серверу.
# Если нет, Вы можете использовать встроенный файловый менеджер.
# Создание виртуального окружения:
#
# Если Вы подключаетесь через SSH, выполните следующую команду для создания виртуального окружения:

#           >>> python3 -m venv venv
# Это создаст папку venv, в которой будут храниться все зависимости.

# Шаг 2: Установка зависимостей
# Активируйте виртуальное окружение:
#
#           >>> source venv/bin/activate
# После активации виртуального окружения Вы увидите, что префикс Вашего терминала изменится,
# указывая на то, что виртуальное окружение активно.

# Установите необходимые библиотеки:
# Если у Вас есть файл requirements.txt в папке Вашего бота, выполните команду:

#           >>> pip install -r requirements.txt

# Если файла нет, Вам нужно будет установить необходимые библиотеки вручную.
# Например, если Ваш бот использует библиотеку python-telegram-bot, выполните:

#           >>> pip install python-telegram-bot

# Шаг 3: Настройка бота
# Настройка токена:
# Убедитесь, что у Вас есть токен Вашего бота от BotFather.
# Обычно его хранят в виде переменной окружения или в отдельном конфигурационном файле.
# Если у Вас есть файл конфигурации, откройте его и проверьте, правильно ли указан токен.

# Шаг 4: Запуск бота
# Запустите бота:
# Если у Вас есть основной файл, например bot.py, выполните команду:

# python main.py
# Если бот запустился без ошибок, он должен начать работать.

# Выход из терминала:
# Если Вы хотите полностью выйти из терминала, используйте команду:
#
# >>> exit

### ВСЕ СРАБОТАЛО ПО ЭТОМУ АЛГОРИТМУ _________________________________________________________________________

### ЗАПУСК В РЕЖИМЕ СЕССИИ С ХОСТИНГА ________________________________________________________________________

# Чтобы создать сессию для работы Вашего бота, не прерывая его выполнение, вы можете использовать screen или tmux,
# как я уже описывал ранее. Давайте рассмотрим, как это сделать с использованием screen, так как Вы уже запустили команду.
#
# Использование screen после запуска команды
# Приостановите выполнение текущей команды:
#
# Нажмите Ctrl + Z. Это приостановит выполнение Вашего скрипта и вернет Вас в командную строку.
# Создайте новую сессию screen:
#
#            >>> screen -S my_bot_session

# Запустите бота снова в новой сессии:
# В новой сессии просто выполните команду:
#
#            >>> python main.py

# Отсоединитесь от сессии:
# Чтобы отсоединиться от сессии screen, нажмите Ctrl + A, затем D.
#
# Вернуться к сессии:
# Чтобы вернуться к сессии, используйте:
#
#           >>> screen -r my_bot_session

# Если Вы уже создали новую сессию screen и запустили в ней бота, то, чтобы отсоединиться от сессии и позволить
# боту продолжать работу в фоновом режиме, выполните следующие шаги:

# Отсоединение от сессии:
# Нажмите Ctrl + A, затем D. Это сочетание клавиш позволяет отсоединиться от текущей сессии screen,
# не останавливая выполнение программы.

# Проверка активных сессий (опционально):
# Если Вы хотите увидеть список всех активных сессий screen, Вы можете выполнить команду:
#
# >>> screen -ls
# Это покажет Вам все активные сессии, например:
#
# There is a screen on:
#     12345.my_bot_session  (Detached)

# Возврат к сессии:
# Если Вам нужно вернуться к Вашей сессии позже, используйте команду:
#
# >>> screen -r my_bot_session

# Выход из терминала:
# Если Вы хотите полностью выйти из терминала, используйте команду:
#
#             >>> exit

### ВНЕСЕНИЕ ИЗМЕНЕНИЙ В БОТ ####################################################################################

# подключение к хостингу timeweb и работа через терминал

#             >>> ssh root@31.130.150.56

# Перейти в корневую папку  bot_Ava

#             >>> cd bot_Ava

# Переход в папку deadlinetaskbot_02_25

#             >>> cd deadlinetaskbot_02_25

# Проверка активных сессий (опционально):
# Если Вы хотите увидеть список всех активных сессий screen, Вы можете выполнить команду:
#
#             >>> screen -ls

# Чтобы удалить лишнюю сессию screen, Вы можете использовать команду screen -S <имя_сессии> -X quit.

# screen -S 81576.my_bot_session -X quit

# Обновление кода с GitHub:
# Выполните команду для обновления кода из репозитория:

#             >>> git pull origin main         ### -

            # вот выход в консоль:
# root@4171473-in62550:~/bot_Ava/deadlinetaskbot_02_25# git pull origin main
# remote: Enumerating objects: 9, done.
# remote: Counting objects: 100% (9/9), done.
# remote: Compressing objects: 100% (5/5), done.
# remote: Total 5 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
# Unpacking objects: 100% (5/5), 4.24 KiB | 868.00 KiB/s, done.
# From https://github.com/pavelmolot161/deadlinetaskbot_02_25
#  * branch            main       -> FETCH_HEAD
#    e90be10..6ff2afc  main       -> origin/main
# Updating e90be10..6ff2afc
# Fast-forward
#  index.html   | 284 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++------------------------------------------------------------------------------
#  main.py      | 235 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------
#  swagger.yaml |  36 ++++++++++----------
#  3 files changed, 356 insertions(+), 199 deletions(-)
# root@4171473-in62550:~/bot_Ava/deadlinetaskbot_02_25#

# Перезапустите бота:
# Если бот запущен в сессии - screen:
#              >>> screen -r 81585.my_bot_session

# Затем остановите текущий процесс (обычно нажать на клавиши cразу обе Ctrl+C)
# Вывод в консоль:
# ^C^CException ignored in: <module 'threading' from '/usr/lib/python3.10/threading.py'>
# Traceback (most recent call last):
#   File "/usr/lib/python3.10/threading.py", line 1567, in _shutdown
#     lock.acquire()
# KeyboardInterrupt:
# root@4171473-in62550:~/bot_Ava/deadlinetaskbot_02_25#

# Запустите бота снова в сессии (screen) - 81585.my_bot_session
#              >>> python main.py                                     БОТ ПЕРЕЗАПУСТИЛСЯ

# Вывод в консоль сессии:
                # root@4171473-in62550:~/bot_Ava/deadlinetaskbot_02_25# python main.py
                #  * Serving Flask app 'main'
                #  * Debug mode: off
                # 2025-02-06 18:52:45,245 - INFO - WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
                #  * Running on all addresses (0.0.0.0)
                #  * Running on http://127.0.0.1:5000
                #  * Running on http://31.130.150.56:5000
                # 2025-02-06 18:52:45,245 - INFO - Press CTRL+C to quit


# Замените main на нужную ветку, если это необходимо.

# как узнать последний комит загруженные на хостинг

#             >>> git log

# Чтобы ВЫЙТИ ИЗ СЕССИИ screen, не закрывая работу бота, выполните следующие шаги:
# Отсоединение от сессию:
# Нажмите комбинацию клавиш Ctrl + A, затем D. Это отсоединит текущую сессию и вернет Вас в командную строку,
# при этом бот продолжит работать в фоновом режиме.

# Выход из терминала:
# Если Вы хотите полностью выйти из терминала, используйте команду:
#
#             >>> exit или нажав Ctrl+D.

# для СВАГЕРА:
       #          >>> http://31.130.150.56:5000/swagger

'''Объяснение вывода данных:
2025-02-06 18:52:45,245 - INFO - WARNING: This is a development server. Do not use it in a production deployment. U
se a production WSGI server instead.

Это предупреждение от Flask, которое сообщает, что запущенный сервер является сервером разработки.
Он не предназначен для использования в производственной среде, так как не обеспечивает необходимую безопасность и
производительность. Для продакшн-окружения рекомендуется использовать WSGI-сервер, такой как Gunicorn или uWSGI.
* Running on all addresses (0.0.0.0)

Это означает, что сервер запущен и слушает на всех доступных IP-адресах Вашего сервера. Это позволяет подключаться к
Вашему приложению с любого IP-адреса, который может достучаться до Вашего сервера.
* Running on http://127.0.0.1:5000

Это локальный адрес (localhost), по которому Вы можете получить доступ к Вашему приложению, если Вы работаете на том
же сервере, где оно запущено. Порт 5000 — это стандартный порт для Flask-приложений.
* Running on http://31.130.150.56:5000

Это внешний IP-адрес Вашего сервера. Вы можете использовать этот адрес для доступа к Вашему приложению из интернета,
если Ваш сервер настроен для этого и не блокирует входящие соединения на порт 5000.
2025-02-06 18:52:45,245 - INFO - Press CTRL+C to quit

Это сообщение говорит вам, что Вы можете остановить сервер, нажав CTRL+C в терминале, где он запущен.'''

# Проверьте, запущен ли Flask-сервер:
# Убедитесь, что Ваш Flask-сервер действительно запущен и слушает на порту 5000.
# Вы можете использовать команду netstat или ss для проверки:

#          >>> sudo netstat -tuln | grep 5000
# или

#          >>> sudo ss -tuln | grep 5000           ### - ЭТА КОМАНДА СРАБОТАЛА

######################################################################################################################
######################################################################################################################
######################################################################################################################

# ОТКАТ ИЗМЕНЕНИЙ:
# Если Вам нужно откатить изменения,
# Вы можете использовать команды
#                     >>> git checkout
#                     или
#                     >>> git revert
#                     в зависимости от того,
# хотите ли Вы просто вернуться к предыдущей версии или создать новый коммит, отменяющий изменения.

